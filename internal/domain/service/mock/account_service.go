// Code generated by mockery v2.46.3. DO NOT EDIT.

package mock

import (
	context "context"

	dto "github.com/mandarine-io/Backend/internal/domain/dto"
	i18n "github.com/nicksnyder/go-i18n/v2/i18n"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AccountServiceMock is an autogenerated mock type for the AccountService type
type AccountServiceMock struct {
	mock.Mock
}

type AccountServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountServiceMock) EXPECT() *AccountServiceMock_Expecter {
	return &AccountServiceMock_Expecter{mock: &_m.Mock}
}

// DeleteAccount provides a mock function with given fields: ctx, id
func (_m *AccountServiceMock) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountServiceMock_DeleteAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccount'
type AccountServiceMock_DeleteAccount_Call struct {
	*mock.Call
}

// DeleteAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *AccountServiceMock_Expecter) DeleteAccount(ctx interface{}, id interface{}) *AccountServiceMock_DeleteAccount_Call {
	return &AccountServiceMock_DeleteAccount_Call{Call: _e.mock.On("DeleteAccount", ctx, id)}
}

func (_c *AccountServiceMock_DeleteAccount_Call) Run(run func(ctx context.Context, id uuid.UUID)) *AccountServiceMock_DeleteAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AccountServiceMock_DeleteAccount_Call) Return(_a0 error) *AccountServiceMock_DeleteAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountServiceMock_DeleteAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *AccountServiceMock_DeleteAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, id
func (_m *AccountServiceMock) GetAccount(ctx context.Context, id uuid.UUID) (dto.AccountOutput, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 dto.AccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (dto.AccountOutput, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) dto.AccountOutput); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dto.AccountOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountServiceMock_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type AccountServiceMock_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *AccountServiceMock_Expecter) GetAccount(ctx interface{}, id interface{}) *AccountServiceMock_GetAccount_Call {
	return &AccountServiceMock_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, id)}
}

func (_c *AccountServiceMock_GetAccount_Call) Run(run func(ctx context.Context, id uuid.UUID)) *AccountServiceMock_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AccountServiceMock_GetAccount_Call) Return(_a0 dto.AccountOutput, _a1 error) *AccountServiceMock_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountServiceMock_GetAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID) (dto.AccountOutput, error)) *AccountServiceMock_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreAccount provides a mock function with given fields: ctx, id
func (_m *AccountServiceMock) RestoreAccount(ctx context.Context, id uuid.UUID) (dto.AccountOutput, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RestoreAccount")
	}

	var r0 dto.AccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (dto.AccountOutput, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) dto.AccountOutput); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dto.AccountOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountServiceMock_RestoreAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreAccount'
type AccountServiceMock_RestoreAccount_Call struct {
	*mock.Call
}

// RestoreAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *AccountServiceMock_Expecter) RestoreAccount(ctx interface{}, id interface{}) *AccountServiceMock_RestoreAccount_Call {
	return &AccountServiceMock_RestoreAccount_Call{Call: _e.mock.On("RestoreAccount", ctx, id)}
}

func (_c *AccountServiceMock_RestoreAccount_Call) Run(run func(ctx context.Context, id uuid.UUID)) *AccountServiceMock_RestoreAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AccountServiceMock_RestoreAccount_Call) Return(_a0 dto.AccountOutput, _a1 error) *AccountServiceMock_RestoreAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountServiceMock_RestoreAccount_Call) RunAndReturn(run func(context.Context, uuid.UUID) (dto.AccountOutput, error)) *AccountServiceMock_RestoreAccount_Call {
	_c.Call.Return(run)
	return _c
}

// SetPassword provides a mock function with given fields: ctx, id, input
func (_m *AccountServiceMock) SetPassword(ctx context.Context, id uuid.UUID, input dto.SetPasswordInput) error {
	ret := _m.Called(ctx, id, input)

	if len(ret) == 0 {
		panic("no return value specified for SetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.SetPasswordInput) error); ok {
		r0 = rf(ctx, id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountServiceMock_SetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPassword'
type AccountServiceMock_SetPassword_Call struct {
	*mock.Call
}

// SetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - input dto.SetPasswordInput
func (_e *AccountServiceMock_Expecter) SetPassword(ctx interface{}, id interface{}, input interface{}) *AccountServiceMock_SetPassword_Call {
	return &AccountServiceMock_SetPassword_Call{Call: _e.mock.On("SetPassword", ctx, id, input)}
}

func (_c *AccountServiceMock_SetPassword_Call) Run(run func(ctx context.Context, id uuid.UUID, input dto.SetPasswordInput)) *AccountServiceMock_SetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dto.SetPasswordInput))
	})
	return _c
}

func (_c *AccountServiceMock_SetPassword_Call) Return(_a0 error) *AccountServiceMock_SetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountServiceMock_SetPassword_Call) RunAndReturn(run func(context.Context, uuid.UUID, dto.SetPasswordInput) error) *AccountServiceMock_SetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmail provides a mock function with given fields: ctx, id, input, localizer
func (_m *AccountServiceMock) UpdateEmail(ctx context.Context, id uuid.UUID, input dto.UpdateEmailInput, localizer *i18n.Localizer) (dto.AccountOutput, error) {
	ret := _m.Called(ctx, id, input, localizer)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmail")
	}

	var r0 dto.AccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.UpdateEmailInput, *i18n.Localizer) (dto.AccountOutput, error)); ok {
		return rf(ctx, id, input, localizer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.UpdateEmailInput, *i18n.Localizer) dto.AccountOutput); ok {
		r0 = rf(ctx, id, input, localizer)
	} else {
		r0 = ret.Get(0).(dto.AccountOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, dto.UpdateEmailInput, *i18n.Localizer) error); ok {
		r1 = rf(ctx, id, input, localizer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountServiceMock_UpdateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmail'
type AccountServiceMock_UpdateEmail_Call struct {
	*mock.Call
}

// UpdateEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - input dto.UpdateEmailInput
//   - localizer *i18n.Localizer
func (_e *AccountServiceMock_Expecter) UpdateEmail(ctx interface{}, id interface{}, input interface{}, localizer interface{}) *AccountServiceMock_UpdateEmail_Call {
	return &AccountServiceMock_UpdateEmail_Call{Call: _e.mock.On("UpdateEmail", ctx, id, input, localizer)}
}

func (_c *AccountServiceMock_UpdateEmail_Call) Run(run func(ctx context.Context, id uuid.UUID, input dto.UpdateEmailInput, localizer *i18n.Localizer)) *AccountServiceMock_UpdateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dto.UpdateEmailInput), args[3].(*i18n.Localizer))
	})
	return _c
}

func (_c *AccountServiceMock_UpdateEmail_Call) Return(_a0 dto.AccountOutput, _a1 error) *AccountServiceMock_UpdateEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountServiceMock_UpdateEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, dto.UpdateEmailInput, *i18n.Localizer) (dto.AccountOutput, error)) *AccountServiceMock_UpdateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, id, input
func (_m *AccountServiceMock) UpdatePassword(ctx context.Context, id uuid.UUID, input dto.UpdatePasswordInput) error {
	ret := _m.Called(ctx, id, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.UpdatePasswordInput) error); ok {
		r0 = rf(ctx, id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountServiceMock_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type AccountServiceMock_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - input dto.UpdatePasswordInput
func (_e *AccountServiceMock_Expecter) UpdatePassword(ctx interface{}, id interface{}, input interface{}) *AccountServiceMock_UpdatePassword_Call {
	return &AccountServiceMock_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, id, input)}
}

func (_c *AccountServiceMock_UpdatePassword_Call) Run(run func(ctx context.Context, id uuid.UUID, input dto.UpdatePasswordInput)) *AccountServiceMock_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dto.UpdatePasswordInput))
	})
	return _c
}

func (_c *AccountServiceMock_UpdatePassword_Call) Return(_a0 error) *AccountServiceMock_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountServiceMock_UpdatePassword_Call) RunAndReturn(run func(context.Context, uuid.UUID, dto.UpdatePasswordInput) error) *AccountServiceMock_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUsername provides a mock function with given fields: ctx, id, input
func (_m *AccountServiceMock) UpdateUsername(ctx context.Context, id uuid.UUID, input dto.UpdateUsernameInput) (dto.AccountOutput, error) {
	ret := _m.Called(ctx, id, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUsername")
	}

	var r0 dto.AccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.UpdateUsernameInput) (dto.AccountOutput, error)); ok {
		return rf(ctx, id, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.UpdateUsernameInput) dto.AccountOutput); ok {
		r0 = rf(ctx, id, input)
	} else {
		r0 = ret.Get(0).(dto.AccountOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, dto.UpdateUsernameInput) error); ok {
		r1 = rf(ctx, id, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountServiceMock_UpdateUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUsername'
type AccountServiceMock_UpdateUsername_Call struct {
	*mock.Call
}

// UpdateUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - input dto.UpdateUsernameInput
func (_e *AccountServiceMock_Expecter) UpdateUsername(ctx interface{}, id interface{}, input interface{}) *AccountServiceMock_UpdateUsername_Call {
	return &AccountServiceMock_UpdateUsername_Call{Call: _e.mock.On("UpdateUsername", ctx, id, input)}
}

func (_c *AccountServiceMock_UpdateUsername_Call) Run(run func(ctx context.Context, id uuid.UUID, input dto.UpdateUsernameInput)) *AccountServiceMock_UpdateUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dto.UpdateUsernameInput))
	})
	return _c
}

func (_c *AccountServiceMock_UpdateUsername_Call) Return(_a0 dto.AccountOutput, _a1 error) *AccountServiceMock_UpdateUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountServiceMock_UpdateUsername_Call) RunAndReturn(run func(context.Context, uuid.UUID, dto.UpdateUsernameInput) (dto.AccountOutput, error)) *AccountServiceMock_UpdateUsername_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyEmail provides a mock function with given fields: ctx, id, req
func (_m *AccountServiceMock) VerifyEmail(ctx context.Context, id uuid.UUID, req dto.VerifyEmailInput) error {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dto.VerifyEmailInput) error); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountServiceMock_VerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyEmail'
type AccountServiceMock_VerifyEmail_Call struct {
	*mock.Call
}

// VerifyEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - req dto.VerifyEmailInput
func (_e *AccountServiceMock_Expecter) VerifyEmail(ctx interface{}, id interface{}, req interface{}) *AccountServiceMock_VerifyEmail_Call {
	return &AccountServiceMock_VerifyEmail_Call{Call: _e.mock.On("VerifyEmail", ctx, id, req)}
}

func (_c *AccountServiceMock_VerifyEmail_Call) Run(run func(ctx context.Context, id uuid.UUID, req dto.VerifyEmailInput)) *AccountServiceMock_VerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dto.VerifyEmailInput))
	})
	return _c
}

func (_c *AccountServiceMock_VerifyEmail_Call) Return(_a0 error) *AccountServiceMock_VerifyEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountServiceMock_VerifyEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, dto.VerifyEmailInput) error) *AccountServiceMock_VerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccountServiceMock creates a new instance of AccountServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountServiceMock {
	mock := &AccountServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
