// Code generated by mockery v2.46.3. DO NOT EDIT.

package mock

import (
	context "context"

	dto "github.com/mandarine-io/Backend/internal/domain/dto"
	mock "github.com/stretchr/testify/mock"

	s3 "github.com/mandarine-io/Backend/pkg/storage/s3"
)

// ResourceServiceMock is an autogenerated mock type for the ResourceService type
type ResourceServiceMock struct {
	mock.Mock
}

type ResourceServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceServiceMock) EXPECT() *ResourceServiceMock_Expecter {
	return &ResourceServiceMock_Expecter{mock: &_m.Mock}
}

// DownloadResource provides a mock function with given fields: ctx, objectID
func (_m *ResourceServiceMock) DownloadResource(ctx context.Context, objectID string) (*s3.FileData, error) {
	ret := _m.Called(ctx, objectID)

	if len(ret) == 0 {
		panic("no return value specified for DownloadResource")
	}

	var r0 *s3.FileData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*s3.FileData, error)); ok {
		return rf(ctx, objectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *s3.FileData); ok {
		r0 = rf(ctx, objectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.FileData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, objectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceMock_DownloadResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadResource'
type ResourceServiceMock_DownloadResource_Call struct {
	*mock.Call
}

// DownloadResource is a helper method to define mock.On call
//   - ctx context.Context
//   - objectID string
func (_e *ResourceServiceMock_Expecter) DownloadResource(ctx interface{}, objectID interface{}) *ResourceServiceMock_DownloadResource_Call {
	return &ResourceServiceMock_DownloadResource_Call{Call: _e.mock.On("DownloadResource", ctx, objectID)}
}

func (_c *ResourceServiceMock_DownloadResource_Call) Run(run func(ctx context.Context, objectID string)) *ResourceServiceMock_DownloadResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ResourceServiceMock_DownloadResource_Call) Return(_a0 *s3.FileData, _a1 error) *ResourceServiceMock_DownloadResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceMock_DownloadResource_Call) RunAndReturn(run func(context.Context, string) (*s3.FileData, error)) *ResourceServiceMock_DownloadResource_Call {
	_c.Call.Return(run)
	return _c
}

// UploadResource provides a mock function with given fields: ctx, input
func (_m *ResourceServiceMock) UploadResource(ctx context.Context, input *dto.UploadResourceInput) (dto.UploadResourceOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for UploadResource")
	}

	var r0 dto.UploadResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UploadResourceInput) (dto.UploadResourceOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UploadResourceInput) dto.UploadResourceOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(dto.UploadResourceOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.UploadResourceInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceMock_UploadResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadResource'
type ResourceServiceMock_UploadResource_Call struct {
	*mock.Call
}

// UploadResource is a helper method to define mock.On call
//   - ctx context.Context
//   - input *dto.UploadResourceInput
func (_e *ResourceServiceMock_Expecter) UploadResource(ctx interface{}, input interface{}) *ResourceServiceMock_UploadResource_Call {
	return &ResourceServiceMock_UploadResource_Call{Call: _e.mock.On("UploadResource", ctx, input)}
}

func (_c *ResourceServiceMock_UploadResource_Call) Run(run func(ctx context.Context, input *dto.UploadResourceInput)) *ResourceServiceMock_UploadResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.UploadResourceInput))
	})
	return _c
}

func (_c *ResourceServiceMock_UploadResource_Call) Return(_a0 dto.UploadResourceOutput, _a1 error) *ResourceServiceMock_UploadResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceMock_UploadResource_Call) RunAndReturn(run func(context.Context, *dto.UploadResourceInput) (dto.UploadResourceOutput, error)) *ResourceServiceMock_UploadResource_Call {
	_c.Call.Return(run)
	return _c
}

// UploadResources provides a mock function with given fields: ctx, input
func (_m *ResourceServiceMock) UploadResources(ctx context.Context, input *dto.UploadResourcesInput) (dto.UploadResourcesOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for UploadResources")
	}

	var r0 dto.UploadResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UploadResourcesInput) (dto.UploadResourcesOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.UploadResourcesInput) dto.UploadResourcesOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(dto.UploadResourcesOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.UploadResourcesInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceMock_UploadResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadResources'
type ResourceServiceMock_UploadResources_Call struct {
	*mock.Call
}

// UploadResources is a helper method to define mock.On call
//   - ctx context.Context
//   - input *dto.UploadResourcesInput
func (_e *ResourceServiceMock_Expecter) UploadResources(ctx interface{}, input interface{}) *ResourceServiceMock_UploadResources_Call {
	return &ResourceServiceMock_UploadResources_Call{Call: _e.mock.On("UploadResources", ctx, input)}
}

func (_c *ResourceServiceMock_UploadResources_Call) Run(run func(ctx context.Context, input *dto.UploadResourcesInput)) *ResourceServiceMock_UploadResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.UploadResourcesInput))
	})
	return _c
}

func (_c *ResourceServiceMock_UploadResources_Call) Return(_a0 dto.UploadResourcesOutput, _a1 error) *ResourceServiceMock_UploadResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceMock_UploadResources_Call) RunAndReturn(run func(context.Context, *dto.UploadResourcesInput) (dto.UploadResourcesOutput, error)) *ResourceServiceMock_UploadResources_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceServiceMock creates a new instance of ResourceServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceServiceMock {
	mock := &ResourceServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
