// Code generated by mockery v2.46.3. DO NOT EDIT.

package mock

import (
	context "context"

	model "github.com/mandarine-io/Backend/internal/persistence/model"
	mock "github.com/stretchr/testify/mock"
)

// BannedTokenRepositoryMock is an autogenerated mock type for the BannedTokenRepository type
type BannedTokenRepositoryMock struct {
	mock.Mock
}

type BannedTokenRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *BannedTokenRepositoryMock) EXPECT() *BannedTokenRepositoryMock_Expecter {
	return &BannedTokenRepositoryMock_Expecter{mock: &_m.Mock}
}

// CreateOrUpdateBannedToken provides a mock function with given fields: ctx, bannedToken
func (_m *BannedTokenRepositoryMock) CreateOrUpdateBannedToken(ctx context.Context, bannedToken *model.BannedTokenEntity) (*model.BannedTokenEntity, error) {
	ret := _m.Called(ctx, bannedToken)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateBannedToken")
	}

	var r0 *model.BannedTokenEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.BannedTokenEntity) (*model.BannedTokenEntity, error)); ok {
		return rf(ctx, bannedToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.BannedTokenEntity) *model.BannedTokenEntity); ok {
		r0 = rf(ctx, bannedToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BannedTokenEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.BannedTokenEntity) error); ok {
		r1 = rf(ctx, bannedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BannedTokenRepositoryMock_CreateOrUpdateBannedToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateBannedToken'
type BannedTokenRepositoryMock_CreateOrUpdateBannedToken_Call struct {
	*mock.Call
}

// CreateOrUpdateBannedToken is a helper method to define mock.On call
//   - ctx context.Context
//   - bannedToken *model.BannedTokenEntity
func (_e *BannedTokenRepositoryMock_Expecter) CreateOrUpdateBannedToken(ctx interface{}, bannedToken interface{}) *BannedTokenRepositoryMock_CreateOrUpdateBannedToken_Call {
	return &BannedTokenRepositoryMock_CreateOrUpdateBannedToken_Call{Call: _e.mock.On("CreateOrUpdateBannedToken", ctx, bannedToken)}
}

func (_c *BannedTokenRepositoryMock_CreateOrUpdateBannedToken_Call) Run(run func(ctx context.Context, bannedToken *model.BannedTokenEntity)) *BannedTokenRepositoryMock_CreateOrUpdateBannedToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.BannedTokenEntity))
	})
	return _c
}

func (_c *BannedTokenRepositoryMock_CreateOrUpdateBannedToken_Call) Return(_a0 *model.BannedTokenEntity, _a1 error) *BannedTokenRepositoryMock_CreateOrUpdateBannedToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BannedTokenRepositoryMock_CreateOrUpdateBannedToken_Call) RunAndReturn(run func(context.Context, *model.BannedTokenEntity) (*model.BannedTokenEntity, error)) *BannedTokenRepositoryMock_CreateOrUpdateBannedToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExpiredBannedToken provides a mock function with given fields: ctx
func (_m *BannedTokenRepositoryMock) DeleteExpiredBannedToken(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredBannedToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BannedTokenRepositoryMock_DeleteExpiredBannedToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpiredBannedToken'
type BannedTokenRepositoryMock_DeleteExpiredBannedToken_Call struct {
	*mock.Call
}

// DeleteExpiredBannedToken is a helper method to define mock.On call
//   - ctx context.Context
func (_e *BannedTokenRepositoryMock_Expecter) DeleteExpiredBannedToken(ctx interface{}) *BannedTokenRepositoryMock_DeleteExpiredBannedToken_Call {
	return &BannedTokenRepositoryMock_DeleteExpiredBannedToken_Call{Call: _e.mock.On("DeleteExpiredBannedToken", ctx)}
}

func (_c *BannedTokenRepositoryMock_DeleteExpiredBannedToken_Call) Run(run func(ctx context.Context)) *BannedTokenRepositoryMock_DeleteExpiredBannedToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *BannedTokenRepositoryMock_DeleteExpiredBannedToken_Call) Return(_a0 error) *BannedTokenRepositoryMock_DeleteExpiredBannedToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BannedTokenRepositoryMock_DeleteExpiredBannedToken_Call) RunAndReturn(run func(context.Context) error) *BannedTokenRepositoryMock_DeleteExpiredBannedToken_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsBannedTokenByJTI provides a mock function with given fields: ctx, jti
func (_m *BannedTokenRepositoryMock) ExistsBannedTokenByJTI(ctx context.Context, jti string) (bool, error) {
	ret := _m.Called(ctx, jti)

	if len(ret) == 0 {
		panic("no return value specified for ExistsBannedTokenByJTI")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, jti)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, jti)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, jti)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BannedTokenRepositoryMock_ExistsBannedTokenByJTI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsBannedTokenByJTI'
type BannedTokenRepositoryMock_ExistsBannedTokenByJTI_Call struct {
	*mock.Call
}

// ExistsBannedTokenByJTI is a helper method to define mock.On call
//   - ctx context.Context
//   - jti string
func (_e *BannedTokenRepositoryMock_Expecter) ExistsBannedTokenByJTI(ctx interface{}, jti interface{}) *BannedTokenRepositoryMock_ExistsBannedTokenByJTI_Call {
	return &BannedTokenRepositoryMock_ExistsBannedTokenByJTI_Call{Call: _e.mock.On("ExistsBannedTokenByJTI", ctx, jti)}
}

func (_c *BannedTokenRepositoryMock_ExistsBannedTokenByJTI_Call) Run(run func(ctx context.Context, jti string)) *BannedTokenRepositoryMock_ExistsBannedTokenByJTI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BannedTokenRepositoryMock_ExistsBannedTokenByJTI_Call) Return(_a0 bool, _a1 error) *BannedTokenRepositoryMock_ExistsBannedTokenByJTI_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BannedTokenRepositoryMock_ExistsBannedTokenByJTI_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *BannedTokenRepositoryMock_ExistsBannedTokenByJTI_Call {
	_c.Call.Return(run)
	return _c
}

// NewBannedTokenRepositoryMock creates a new instance of BannedTokenRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBannedTokenRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *BannedTokenRepositoryMock {
	mock := &BannedTokenRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
