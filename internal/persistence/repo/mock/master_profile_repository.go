// Code generated by mockery v2.46.3. DO NOT EDIT.

package mock

import (
	context "context"

	model "github.com/mandarine-io/Backend/internal/persistence/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MasterProfileRepositoryMock is an autogenerated mock type for the MasterProfileRepository type
type MasterProfileRepositoryMock struct {
	mock.Mock
}

type MasterProfileRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MasterProfileRepositoryMock) EXPECT() *MasterProfileRepositoryMock_Expecter {
	return &MasterProfileRepositoryMock_Expecter{mock: &_m.Mock}
}

// CountMasterProfiles provides a mock function with given fields: ctx, filter
func (_m *MasterProfileRepositoryMock) CountMasterProfiles(ctx context.Context, filter map[model.MasterProfileFilter]interface{}) (int64, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for CountMasterProfiles")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[model.MasterProfileFilter]interface{}) (int64, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[model.MasterProfileFilter]interface{}) int64); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[model.MasterProfileFilter]interface{}) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_CountMasterProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountMasterProfiles'
type MasterProfileRepositoryMock_CountMasterProfiles_Call struct {
	*mock.Call
}

// CountMasterProfiles is a helper method to define mock.On call
//   - ctx context.Context
//   - filter map[model.MasterProfileFilter]interface{}
func (_e *MasterProfileRepositoryMock_Expecter) CountMasterProfiles(ctx interface{}, filter interface{}) *MasterProfileRepositoryMock_CountMasterProfiles_Call {
	return &MasterProfileRepositoryMock_CountMasterProfiles_Call{Call: _e.mock.On("CountMasterProfiles", ctx, filter)}
}

func (_c *MasterProfileRepositoryMock_CountMasterProfiles_Call) Run(run func(ctx context.Context, filter map[model.MasterProfileFilter]interface{})) *MasterProfileRepositoryMock_CountMasterProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[model.MasterProfileFilter]interface{}))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_CountMasterProfiles_Call) Return(_a0 int64, _a1 error) *MasterProfileRepositoryMock_CountMasterProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_CountMasterProfiles_Call) RunAndReturn(run func(context.Context, map[model.MasterProfileFilter]interface{}) (int64, error)) *MasterProfileRepositoryMock_CountMasterProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMasterProfile provides a mock function with given fields: ctx, masterProfile
func (_m *MasterProfileRepositoryMock) CreateMasterProfile(ctx context.Context, masterProfile *model.MasterProfileEntity) (*model.MasterProfileEntity, error) {
	ret := _m.Called(ctx, masterProfile)

	if len(ret) == 0 {
		panic("no return value specified for CreateMasterProfile")
	}

	var r0 *model.MasterProfileEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.MasterProfileEntity) (*model.MasterProfileEntity, error)); ok {
		return rf(ctx, masterProfile)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.MasterProfileEntity) *model.MasterProfileEntity); ok {
		r0 = rf(ctx, masterProfile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MasterProfileEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.MasterProfileEntity) error); ok {
		r1 = rf(ctx, masterProfile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_CreateMasterProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMasterProfile'
type MasterProfileRepositoryMock_CreateMasterProfile_Call struct {
	*mock.Call
}

// CreateMasterProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - masterProfile *model.MasterProfileEntity
func (_e *MasterProfileRepositoryMock_Expecter) CreateMasterProfile(ctx interface{}, masterProfile interface{}) *MasterProfileRepositoryMock_CreateMasterProfile_Call {
	return &MasterProfileRepositoryMock_CreateMasterProfile_Call{Call: _e.mock.On("CreateMasterProfile", ctx, masterProfile)}
}

func (_c *MasterProfileRepositoryMock_CreateMasterProfile_Call) Run(run func(ctx context.Context, masterProfile *model.MasterProfileEntity)) *MasterProfileRepositoryMock_CreateMasterProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.MasterProfileEntity))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_CreateMasterProfile_Call) Return(_a0 *model.MasterProfileEntity, _a1 error) *MasterProfileRepositoryMock_CreateMasterProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_CreateMasterProfile_Call) RunAndReturn(run func(context.Context, *model.MasterProfileEntity) (*model.MasterProfileEntity, error)) *MasterProfileRepositoryMock_CreateMasterProfile_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsMasterProfileByUserId provides a mock function with given fields: ctx, id
func (_m *MasterProfileRepositoryMock) ExistsMasterProfileByUserId(ctx context.Context, id uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ExistsMasterProfileByUserId")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_ExistsMasterProfileByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsMasterProfileByUserId'
type MasterProfileRepositoryMock_ExistsMasterProfileByUserId_Call struct {
	*mock.Call
}

// ExistsMasterProfileByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MasterProfileRepositoryMock_Expecter) ExistsMasterProfileByUserId(ctx interface{}, id interface{}) *MasterProfileRepositoryMock_ExistsMasterProfileByUserId_Call {
	return &MasterProfileRepositoryMock_ExistsMasterProfileByUserId_Call{Call: _e.mock.On("ExistsMasterProfileByUserId", ctx, id)}
}

func (_c *MasterProfileRepositoryMock_ExistsMasterProfileByUserId_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MasterProfileRepositoryMock_ExistsMasterProfileByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_ExistsMasterProfileByUserId_Call) Return(_a0 bool, _a1 error) *MasterProfileRepositoryMock_ExistsMasterProfileByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_ExistsMasterProfileByUserId_Call) RunAndReturn(run func(context.Context, uuid.UUID) (bool, error)) *MasterProfileRepositoryMock_ExistsMasterProfileByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// FindEnabledMasterProfileByUsername provides a mock function with given fields: ctx, username
func (_m *MasterProfileRepositoryMock) FindEnabledMasterProfileByUsername(ctx context.Context, username string) (*model.MasterProfileEntity, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for FindEnabledMasterProfileByUsername")
	}

	var r0 *model.MasterProfileEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.MasterProfileEntity, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.MasterProfileEntity); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MasterProfileEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindEnabledMasterProfileByUsername'
type MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call struct {
	*mock.Call
}

// FindEnabledMasterProfileByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MasterProfileRepositoryMock_Expecter) FindEnabledMasterProfileByUsername(ctx interface{}, username interface{}) *MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call {
	return &MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call{Call: _e.mock.On("FindEnabledMasterProfileByUsername", ctx, username)}
}

func (_c *MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call) Run(run func(ctx context.Context, username string)) *MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call) Return(_a0 *model.MasterProfileEntity, _a1 error) *MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call) RunAndReturn(run func(context.Context, string) (*model.MasterProfileEntity, error)) *MasterProfileRepositoryMock_FindEnabledMasterProfileByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// FindMasterProfileByUserId provides a mock function with given fields: ctx, id
func (_m *MasterProfileRepositoryMock) FindMasterProfileByUserId(ctx context.Context, id uuid.UUID) (*model.MasterProfileEntity, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindMasterProfileByUserId")
	}

	var r0 *model.MasterProfileEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.MasterProfileEntity, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.MasterProfileEntity); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MasterProfileEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_FindMasterProfileByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMasterProfileByUserId'
type MasterProfileRepositoryMock_FindMasterProfileByUserId_Call struct {
	*mock.Call
}

// FindMasterProfileByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MasterProfileRepositoryMock_Expecter) FindMasterProfileByUserId(ctx interface{}, id interface{}) *MasterProfileRepositoryMock_FindMasterProfileByUserId_Call {
	return &MasterProfileRepositoryMock_FindMasterProfileByUserId_Call{Call: _e.mock.On("FindMasterProfileByUserId", ctx, id)}
}

func (_c *MasterProfileRepositoryMock_FindMasterProfileByUserId_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MasterProfileRepositoryMock_FindMasterProfileByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_FindMasterProfileByUserId_Call) Return(_a0 *model.MasterProfileEntity, _a1 error) *MasterProfileRepositoryMock_FindMasterProfileByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_FindMasterProfileByUserId_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.MasterProfileEntity, error)) *MasterProfileRepositoryMock_FindMasterProfileByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// FindMasterProfiles provides a mock function with given fields: ctx, filter, pagination, sort
func (_m *MasterProfileRepositoryMock) FindMasterProfiles(ctx context.Context, filter map[model.MasterProfileFilter]interface{}, pagination *model.Pagination, sort []*model.Sort) ([]*model.MasterProfileEntity, error) {
	ret := _m.Called(ctx, filter, pagination, sort)

	if len(ret) == 0 {
		panic("no return value specified for FindMasterProfiles")
	}

	var r0 []*model.MasterProfileEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[model.MasterProfileFilter]interface{}, *model.Pagination, []*model.Sort) ([]*model.MasterProfileEntity, error)); ok {
		return rf(ctx, filter, pagination, sort)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[model.MasterProfileFilter]interface{}, *model.Pagination, []*model.Sort) []*model.MasterProfileEntity); ok {
		r0 = rf(ctx, filter, pagination, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.MasterProfileEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[model.MasterProfileFilter]interface{}, *model.Pagination, []*model.Sort) error); ok {
		r1 = rf(ctx, filter, pagination, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_FindMasterProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMasterProfiles'
type MasterProfileRepositoryMock_FindMasterProfiles_Call struct {
	*mock.Call
}

// FindMasterProfiles is a helper method to define mock.On call
//   - ctx context.Context
//   - filter map[model.MasterProfileFilter]interface{}
//   - pagination *model.Pagination
//   - sort []*model.Sort
func (_e *MasterProfileRepositoryMock_Expecter) FindMasterProfiles(ctx interface{}, filter interface{}, pagination interface{}, sort interface{}) *MasterProfileRepositoryMock_FindMasterProfiles_Call {
	return &MasterProfileRepositoryMock_FindMasterProfiles_Call{Call: _e.mock.On("FindMasterProfiles", ctx, filter, pagination, sort)}
}

func (_c *MasterProfileRepositoryMock_FindMasterProfiles_Call) Run(run func(ctx context.Context, filter map[model.MasterProfileFilter]interface{}, pagination *model.Pagination, sort []*model.Sort)) *MasterProfileRepositoryMock_FindMasterProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[model.MasterProfileFilter]interface{}), args[2].(*model.Pagination), args[3].([]*model.Sort))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_FindMasterProfiles_Call) Return(_a0 []*model.MasterProfileEntity, _a1 error) *MasterProfileRepositoryMock_FindMasterProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_FindMasterProfiles_Call) RunAndReturn(run func(context.Context, map[model.MasterProfileFilter]interface{}, *model.Pagination, []*model.Sort) ([]*model.MasterProfileEntity, error)) *MasterProfileRepositoryMock_FindMasterProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMasterProfile provides a mock function with given fields: ctx, masterProfile
func (_m *MasterProfileRepositoryMock) UpdateMasterProfile(ctx context.Context, masterProfile *model.MasterProfileEntity) (*model.MasterProfileEntity, error) {
	ret := _m.Called(ctx, masterProfile)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMasterProfile")
	}

	var r0 *model.MasterProfileEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.MasterProfileEntity) (*model.MasterProfileEntity, error)); ok {
		return rf(ctx, masterProfile)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.MasterProfileEntity) *model.MasterProfileEntity); ok {
		r0 = rf(ctx, masterProfile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MasterProfileEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.MasterProfileEntity) error); ok {
		r1 = rf(ctx, masterProfile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterProfileRepositoryMock_UpdateMasterProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMasterProfile'
type MasterProfileRepositoryMock_UpdateMasterProfile_Call struct {
	*mock.Call
}

// UpdateMasterProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - masterProfile *model.MasterProfileEntity
func (_e *MasterProfileRepositoryMock_Expecter) UpdateMasterProfile(ctx interface{}, masterProfile interface{}) *MasterProfileRepositoryMock_UpdateMasterProfile_Call {
	return &MasterProfileRepositoryMock_UpdateMasterProfile_Call{Call: _e.mock.On("UpdateMasterProfile", ctx, masterProfile)}
}

func (_c *MasterProfileRepositoryMock_UpdateMasterProfile_Call) Run(run func(ctx context.Context, masterProfile *model.MasterProfileEntity)) *MasterProfileRepositoryMock_UpdateMasterProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.MasterProfileEntity))
	})
	return _c
}

func (_c *MasterProfileRepositoryMock_UpdateMasterProfile_Call) Return(_a0 *model.MasterProfileEntity, _a1 error) *MasterProfileRepositoryMock_UpdateMasterProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MasterProfileRepositoryMock_UpdateMasterProfile_Call) RunAndReturn(run func(context.Context, *model.MasterProfileEntity) (*model.MasterProfileEntity, error)) *MasterProfileRepositoryMock_UpdateMasterProfile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMasterProfileRepositoryMock creates a new instance of MasterProfileRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMasterProfileRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MasterProfileRepositoryMock {
	mock := &MasterProfileRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
