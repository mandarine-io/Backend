consumes:
- application/json
definitions:
  dto.AccountOutput:
    properties:
      email:
        format: email
        type: string
      isDeleted:
        type: boolean
      isEmailVerified:
        type: boolean
      isEnabled:
        type: boolean
      isPasswordTemp:
        type: boolean
      username:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - email
    - isDeleted
    - isEmailVerified
    - isEnabled
    - isPasswordTemp
    - username
    type: object
  dto.ErrorResponse:
    properties:
      message:
        type: string
      path:
        example: /api/v0/example
        format: url_path
        type: string
      status:
        maximum: 599
        minimum: 400
        type: integer
      timestamp:
        type: string
    required:
    - message
    - path
    - status
    - timestamp
    type: object
  dto.JwtTokensOutput:
    properties:
      accessToken:
        format: jwt
        type: string
    required:
    - accessToken
    type: object
  dto.LoginInput:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  dto.RecoveryPasswordInput:
    properties:
      email:
        format: email
        type: string
    required:
    - email
    type: object
  dto.RegisterConfirmInput:
    properties:
      email:
        format: email
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  dto.RegisterInput:
    properties:
      email:
        format: email
        type: string
      password:
        format: zxcvbn
        type: string
      username:
        format: username
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.ResetPasswordInput:
    properties:
      email:
        format: email
        type: string
      otp:
        type: string
      password:
        format: zxcvbn
        type: string
    required:
    - email
    - otp
    - password
    type: object
  dto.SetPasswordInput:
    properties:
      password:
        format: zxcvbn
        type: string
    required:
    - password
    type: object
  dto.SocialLoginCallbackInput:
    properties:
      code:
        type: string
      state:
        type: string
    required:
    - code
    - state
    type: object
  dto.UpdateEmailInput:
    properties:
      email:
        format: email
        type: string
    required:
    - email
    type: object
  dto.UpdatePasswordInput:
    properties:
      newPassword:
        format: zxcvbn
        type: string
      oldPassword:
        type: string
    required:
    - newPassword
    - oldPassword
    type: object
  dto.UpdateUsernameInput:
    properties:
      username:
        format: username
        type: string
    required:
    - username
    type: object
  dto.UploadResourceOutput:
    properties:
      object_id:
        type: string
    type: object
  dto.UploadResourcesOutput:
    properties:
      count:
        type: integer
      data:
        additionalProperties:
          $ref: '#/definitions/dto.UploadResourceOutput'
        type: object
    type: object
  dto.VerifyEmailInput:
    properties:
      email:
        format: email
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  dto.VerifyRecoveryCodeInput:
    properties:
      email:
        format: email
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  health.Response:
    properties:
      name:
        type: string
      pass:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: mandarine.app@yandex.ru
    name: Mandarine Support
  description: API for web and mobile application Mandarine
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Mandarine API
  version: 0.0.0
paths:
  /health:
    get:
      consumes:
      - application/json
      description: Request for getting health status. In response will be status of
        all checks (database, minio, smtp, redis).
      operationId: Health
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/health.Response'
            type: array
      summary: Health
      tags:
      - Metrics API
  /v0/account:
    delete:
      consumes:
      - application/json
      description: Request for deleting account. User must be logged in. User must
        not be deleted.
      operationId: DeleteAccount
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete account
      tags:
      - Account API
    get:
      consumes:
      - application/json
      description: Request for receiving own account. User must be logged in. In response
        will be returned own account info.
      operationId: GetAccount
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AccountOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get account
      tags:
      - Account API
  /v0/account/email:
    patch:
      consumes:
      - application/json
      description: Request for updating email. User must be logged in. In process
        will be sent verification email. In response will be returned updated account
        info.
      operationId: UpdateEmail
      parameters:
      - description: Update email request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateEmailInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AccountOutput'
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/dto.AccountOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update email
      tags:
      - Account API
  /v0/account/email/verify:
    post:
      consumes:
      - application/json
      description: Request for verify email. User must be logged in.
      operationId: VerifyEmail
      parameters:
      - description: Verify email request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyEmailInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Verify email
      tags:
      - Account API
  /v0/account/password:
    patch:
      consumes:
      - application/json
      description: Request for updating password. User must be logged in.
      operationId: UpdatePassword
      parameters:
      - description: Update password request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update password
      tags:
      - Account API
    post:
      consumes:
      - application/json
      description: Request for setting password. User must be logged in.
      operationId: SetPassword
      parameters:
      - description: Set password request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.SetPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Set password
      tags:
      - Account API
  /v0/account/restore:
    get:
      consumes:
      - application/json
      description: Request for restoring account. User must be logged in. User must
        be deleted. In response will be returned restored account info.
      operationId: RestoreAccount
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AccountOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Restore account
      tags:
      - Account API
  /v0/account/username:
    patch:
      consumes:
      - application/json
      description: Request for updating username. User must be logged in. In response
        will be returned updated account info.
      operationId: UpdateUsername
      parameters:
      - description: Update username request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUsernameInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AccountOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update username
      tags:
      - Account API
  /v0/auth/login:
    post:
      consumes:
      - application/json
      description: Request for authentication. In response will be new access token
        in body and new refresh tokens in http-only cookie.
      operationId: Login
      parameters:
      - description: Login request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: RefreshToken=; HttpOnly; Max-Age=86400; Secure
              type: string
          schema:
            $ref: '#/definitions/dto.JwtTokensOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Sign in
      tags:
      - Authentication and Authorization API
  /v0/auth/logout:
    get:
      consumes:
      - application/json
      description: Request for logout. User must be logged in.
      operationId: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - Authentication and Authorization API
  /v0/auth/recovery-password:
    post:
      consumes:
      - application/json
      description: Request for recovery password. At the end will be sent email with
        code
      operationId: RecoveryPassword
      parameters:
      - description: Recovery password body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.RecoveryPasswordInput'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Recovery password
      tags:
      - Authentication and Authorization API
  /v0/auth/recovery-password/verify:
    post:
      consumes:
      - application/json
      description: Request for verify recovery code. If code is correct will be sent
        status 200
      operationId: VerifyRecoveryCode
      parameters:
      - description: Verify recovery code body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyRecoveryCodeInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Verify recovery code
      tags:
      - Authentication and Authorization API
  /v0/auth/refresh:
    get:
      consumes:
      - application/json
      description: Request for refreshing tokens. In response will be new access token
        in body and new refresh tokens in http-only cookie.
      operationId: RefreshTokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: RefreshToken=; HttpOnly; Max-Age=86400; Secure
              type: string
          schema:
            $ref: '#/definitions/dto.JwtTokensOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Refresh tokens
      tags:
      - Authentication and Authorization API
  /v0/auth/register:
    post:
      consumes:
      - application/json
      description: Request for creating new user. At the end will be sent confirmation
        email with code
      operationId: Register
      parameters:
      - description: Register request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterInput'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register
      tags:
      - Authentication and Authorization API
  /v0/auth/register/confirm:
    post:
      consumes:
      - application/json
      description: Request for confirming registration. At the end will be created
        new user
      operationId: RegisterConfirm
      parameters:
      - description: Register confirm body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterConfirmInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register confirmation
      tags:
      - Authentication and Authorization API
  /v0/auth/reset-password:
    post:
      consumes:
      - application/json
      description: Request for reset password. If code is correct will be updated
        password
      operationId: ResetPassword
      parameters:
      - description: Reset password body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Reset password
      tags:
      - Authentication and Authorization API
  /v0/auth/social/{provider}:
    get:
      consumes:
      - application/json
      description: Request for redirecting to OAuth consent page. After authorization,
        it will redirect to redirectUrl with authorization code and state
      operationId: SocialLogin
      parameters:
      - description: Social login provider (yandex, google, mailru)
        in: path
        name: provider
        required: true
        type: string
      - description: Redirect URL
        in: query
        name: redirectUrl
        required: true
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: Found
          headers:
            Set-Cookie:
              description: OAuthGoogleState=; HttpOnly; Max-Age=1200; Secure
              type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Social login
      tags:
      - Authentication and Authorization API
  /v0/auth/social/{provider}/callback:
    post:
      consumes:
      - application/json
      description: Request for exchanging authorization code to token pairs. In process,
        it will exchange code to user info and register new user or login existing
        user. In response will be new access token in body and new refresh tokens
        in http-only cookie.
      operationId: SocialLoginCallback
      parameters:
      - description: Social login provider (yandex, google, mailru)
        in: path
        name: provider
        required: true
        type: string
      - description: Social login callback request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.SocialLoginCallbackInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: RefreshToken=; HttpOnly; Max-Age=86400; Secure
              type: string
          schema:
            $ref: '#/definitions/dto.JwtTokensOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Social login callback
      tags:
      - Authentication and Authorization API
  /v0/resources/{objectId}:
    get:
      description: Request for getting resource. Return the resource in S3 storage.
      operationId: DownloadResource
      parameters:
      - description: Object id
        in: path
        name: objectId
        required: true
        type: string
      produces:
      - '*/*'
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Download resource
      tags:
      - Resource API
  /v0/resources/many:
    post:
      consumes:
      - multipart/form-data
      description: Request for uploading resources. Return the array of object ids
        in S3 storage for successful uploaded files.
      operationId: UploadResources
      parameters:
      - collectionFormat: csv
        description: Files to upload
        in: formData
        items:
          type: file
        name: resources
        required: true
        type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UploadResourcesOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload resources
      tags:
      - Resource API
  /v0/resources/one:
    post:
      consumes:
      - multipart/form-data
      description: Request for uploading resource. Return the object id in S3 storage.
      operationId: UploadResource
      parameters:
      - description: File to upload
        in: formData
        name: resource
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UploadResourceOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload resource
      tags:
      - Resource API
produces:
- application/json
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: API for account management
  name: Account API
- description: API for authentication and authorization
  name: Authentication and Authorization API
- description: API for resource management
  name: Resource API
- description: API for getting metrics
  name: Metrics API
